import TelegramApi from "node-telegram-bot-api";
import mysql from "mysql2/promise";
import fs from "fs";
import { getOrders, sendCode } from "./API/OrderService.js";
import {
  authorizedMenu,
  forceReply,
} from "./MenuAndOptions/KeyboardOptions.js";
import { start } from "repl";
export const conn = mysql.createPool({
  host: "127.0.0.1",
  user: "root",
  database: "kaspiservice",
  port: "3306",
  password: "",
});
const adminId = 767355250;
const original = "Zeveta1559!";
const config = JSON.parse(
  await fs.promises.readFile(new URL("./config/config.json", import.meta.url))
);
const { token, replyTimeout } = config;
export const bot = new TelegramApi(token, { polling: true });
const removeReplyListener = (id) => {
  bot.removeReplyListener(id);
};
bot.setMyCommands(authorizedMenu);
const checkForAuth = async (id) => {
  try {
    const name = (
      await conn.query("SELECT name FROM users WHERE telegram_id = " + id)
    )[0];
    if (name.length === 0) {
      return false;
    }
    return true;
  } catch (e) {
    return false;
  }
};
const registration = async (password, telegram_id, name) => {
  try {
    if (password === original) {
      await conn.query("INSERT INTO users SET ?", { telegram_id, name });
      return true;
    }
    return false;
  } catch (e) {
    return false;
  }
};

try {
  (async function start() {
    console.log("Bot started.");
    bot.on("message", async (msg) => {
      const chatId = msg.chat.id;
      const fromWho = msg.from.id;
      const text = msg.text;
      const isAuth = await checkForAuth(fromWho);
      if (!isAuth && !msg.reply_to_message) {
        await bot
          .sendMessage(
            chatId,
            "–û—à–∏–±–∫–∞! –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ —É –ì–∞—Å—ã—Ä–∞.",
            forceReply
          )
          .then(async (msg2) => {
            const replylistenerid = bot.onReplyToMessage(
              msg2.chat.id,
              msg2.message_id,
              async (msg3) => {
                removeReplyListener(replylistenerid);
                const success = await registration(
                  msg3.text,
                  fromWho,
                  msg.from.first_name
                );
                if (success) {
                  await bot.sendMessage(
                    chatId,
                    "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!"
                  );
                  return;
                } else {
                  await bot.sendMessage(
                    chatId,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!"
                  );
                  return;
                }
              }
            );
            setTimeout(removeReplyListener, 30 * 1000, replylistenerid);
          });
        return;
      }
      if (!isAuth) {
        return;
      }
      bot.setMyCommands(authorizedMenu);
      if (text.startsWith("/add store") && fromWho === 767355250) {
        const words = text.split(" ");
        await conn.query(`INSERT INTO stores SET ?`, {
          store_name: words[2],
          api_token: words[3],
          manager: words[4],
        });
        await bot.sendMessage(
          chatId,
          "Store with name = `" +
            words[2] +
            "` successfully added to the database."
        );
        return;
      }
      if (text.startsWith("/delete store") && fromWho === adminId) {
        const words = text.split(" ");
        await conn.query(`DELETE FROM stores WHERE id = "${words[2]}"`);
        await bot.sendMessage(
          chatId,
          "Store with ID = " + words[2] + " deleted."
        );
        return;
      }
      if (text === "/start" && !msg.reply_to_message) {
        const stores = (await conn.query("SELECT * FROM stores"))[0];
        const buttons = stores.map((store) => {
          return [
            {
              text: `[${store.id}] ${store.store_name} - ${store.manager}`,
              callback_data: `use ${store.id} ${store.api_token}`,
            },
          ];
        });
        await bot.sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤:", {
          reply_markup: JSON.stringify({
            inline_keyboard: buttons,
          }),
        });
        return;
      }
    });
    bot.on("callback_query", async (query) => {
      const chatId = query.message.chat.id;
      const fromWho = query.message.from.id;
      const queryId = query.id;
      const text = query.message.text;
      const data = query.data;
      if (data.startsWith("use")) {
        try {
          const [use, storeId, api_token] = data.split(" ");
          const orders = await getOrders(api_token);
          const text = orders.map((order, index) => {
            return `[${index}] üî∂ ${order.attributes.deliveryAddress.formattedAddress} üî∂ <a href="tel:+7768290879">${order.attributes.customer.cellPhone}</a>`;
          });
          const answer = text.join("\n\n");
          if (orders.length === 0) {
            await bot.answerCallbackQuery(queryId, {
              text: "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            });
            await bot.sendMessage(
              chatId,
              "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤."
            );
            return;
          }
          await bot
            .sendMessage(
              chatId,
              `–í—ã–±–µ—Ä–∏ –∑–∞–∫–∞–∑: –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤–º–µ—Å—Ç–µ —Å –∫–æ–¥–æ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ ${
                parseInt(replyTimeout) / 60000
              } –º–∏–Ω—É—Ç.\n\n` + answer,
              { ...forceReply, parse_mode: "HTML" }
            )
            .then(async (msg2) => {
              await bot.answerCallbackQuery(queryId, {
                text: "–ú–∞–≥–∞–∑–∏–Ω –≤—ã–±—Ä–∞–Ω. ID: " + storeId,
              });
              const replylistenerid = bot.onReplyToMessage(
                msg2.chat.id,
                msg2.message_id,
                async (msg) => {
                  try {
                    bot.removeReplyListener(replylistenerid);
                    const key = parseInt(msg.text.split(" ")[0]);
                    const code = msg.text.split(" ")[1];
                    if (code) {
                      try {
                        await sendCode(api_token, orders[key].id, true, code);
                        await bot.sendMessage(
                          chatId,
                          "–ö–æ–¥ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–µ–Ω! –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω."
                        );
                        return;
                      } catch (e) {
                        await bot.sendMessage(
                          chatId,
                          "–û—à–∏–±–∫–∞! –ö–∞–∂–µ—Ç—Å—è –∫–æ–¥ –Ω–µ –≤–µ—Ä–µ–Ω...\n" +
                            (e.response?.data?.errorbs
                              ? e.response?.data.errors[0].title
                              : e.message)
                        );
                        return;
                      }
                    }
                    await sendCode(api_token, orders[key].id);
                    await bot
                      .sendMessage(
                        msg2.chat.id,
                        `–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–π–¥–µ—Ç –¥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è. –ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í —Ç–µ—á–µ–Ω–∏–µ ${
                          parseInt(replyTimeout) / 60000
                        } –º–∏–Ω—É—Ç!`,
                        forceReply
                      )
                      .then((msg3) => {
                        const replylistenerid = bot.onReplyToMessage(
                          msg3.chat.id,
                          msg3.message_id,
                          async (msg4) => {
                            try {
                              bot.removeReplyListener(replylistenerid);
                              await sendCode(
                                api_token,
                                orders[key].id,
                                true,
                                msg4.text
                              );
                              await bot.sendMessage(
                                msg4.chat.id,
                                "–ö–æ–¥ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–µ–Ω! –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω."
                              );
                            } catch (e) {
                              await bot.sendMessage(
                                msg4.chat.id,
                                "–û—à–∏–±–∫–∞! –ö–∞–∂–µ—Ç—Å—è –∫–æ–¥ –Ω–µ –≤–µ—Ä–µ–Ω...\n" +
                                  (e.response?.data?.errors
                                    ? e.response?.data.errors[0].title
                                    : e.message)
                              );
                            }
                          }
                        );
                        setTimeout(
                          removeReplyListener,
                          parseInt(replyTimeout),
                          replylistenerid
                        );
                      });
                  } catch (e) {
                    await bot.sendMessage(
                      msg2.chat.id,
                      "–û—à–∏–±–∫–∞! –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã —É–∂–µ –Ω–µ–¥–∞–≤–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–¥–Ω–µ–µ.\n" +
                        (e.response?.data?.errors
                          ? e.response.data.errors[0].title
                          : e.message)
                    );
                  }
                }
              );
              setTimeout(
                removeReplyListener,
                parseInt(replyTimeout),
                replylistenerid
              );
            });
        } catch (e) {
          await bot.answerCallbackQuery(queryId, {
            text: "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!\n" + e,
          });
        }
      }
    });
  })();
} catch (e) {
  console.log("Bot crashed");
  start();
}
